////*****************************************************************************
////
////	File:		QmOpenGLApi.cpp
////	Created:	2013-08-26
////
////*****************************************************************************
//
//#include "QmOpenGLApi.h"
//
//#include <Windows.h>
//#include <gl/GL.h>
//#include <GLext.h>
//#include <wglext.h>
//
//#include QUANTUM_CORE_H(Rendering/OpenGL/QmOpenGLContext)
//#include QUANTUM_CORE_H(Rendering/Window/QmWindow)
//
//#define QUANTUM_OPEN_GL_FUNC_NULL( PFNOPENGLPROC, funcName ) PFNOPENGLPROC funcName = nullptr;
//
//#define QUANTUM_OPEN_GL_FUNC_PROC( PFNOPENGLPROC, funcName )		\
//	funcName = (PFNOPENGLPROC)wglGetProcAddress( #funcName );	\
//	QUANTUM_ASSERT( funcName );									\
//	if ( funcName == nullptr ) return;
//
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETSTRINGIPROC, glGetStringi )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGENVERTEXARRAYSPROC, glGenVertexArrays )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLBINDVERTEXARRAYPROC, glBindVertexArray )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLVERTEXATTRIBPOINTERPROC, glVertexAttribPointer )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLENABLEVERTEXATTRIBARRAYPROC, glEnableVertexAttribArray )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLDISABLEVERTEXATTRIBARRAYPROC, glDisableVertexAttribArray )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGENBUFFERSPROC, glGenBuffers )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLBINDBUFFERPROC, glBindBuffer )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLBUFFERDATAPROC, glBufferData )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLCREATESHADERPROC, glCreateShader )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLSHADERSOURCEPROC, glShaderSource )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLCOMPILESHADERPROC, glCompileShader )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETSHADERIVPROC, glGetShaderiv )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETSHADERINFOLOGPROC, glGetShaderInfoLog )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLCREATEPROGRAMPROC, glCreateProgram )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLATTACHSHADERPROC, glAttachShader )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLLINKPROGRAMPROC, glLinkProgram )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETPROGRAMIVPROC, glGetProgramiv )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETPROGRAMINFOLOGPROC, glGetProgramInfoLog )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLUSEPROGRAMPROC, glUseProgram )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNGLGETATTRIBLOCATIONPROC, glGetAttribLocation )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNWGLCREATECONTEXTATTRIBSARBPROC, wglCreateContextAttribsARB )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNWGLCHOOSEPIXELFORMATARBPROC, wglChoosePixelFormatARB )
//QUANTUM_OPEN_GL_FUNC_NULL( PFNWGLGETEXTENSIONSSTRINGARBPROC, wglGetExtensionsStringARB );
//
//bool QmOpenGLApi::_bApiLoaded = false;
//
////-----------------------------------------------------------------------------
//// Name:		init
////
//// Created:		2013-08-26
////-----------------------------------------------------------------------------
//void QmOpenGLApi::init()
//{
//	if	( _bApiLoaded )
//	{
//		return;
//	}
//
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETSTRINGIPROC, glGetStringi )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGENVERTEXARRAYSPROC, glGenVertexArrays )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLBINDVERTEXARRAYPROC, glBindVertexArray )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLVERTEXATTRIBPOINTERPROC, glVertexAttribPointer )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLENABLEVERTEXATTRIBARRAYPROC, glEnableVertexAttribArray )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLDISABLEVERTEXATTRIBARRAYPROC, glDisableVertexAttribArray )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGENBUFFERSPROC, glGenBuffers )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLBINDBUFFERPROC, glBindBuffer )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLBUFFERDATAPROC, glBufferData )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLCREATESHADERPROC, glCreateShader )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLSHADERSOURCEPROC, glShaderSource )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLCOMPILESHADERPROC, glCompileShader )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETSHADERIVPROC, glGetShaderiv )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETSHADERINFOLOGPROC, glGetShaderInfoLog )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLCREATEPROGRAMPROC, glCreateProgram )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLATTACHSHADERPROC, glAttachShader )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLLINKPROGRAMPROC, glLinkProgram )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETPROGRAMIVPROC, glGetProgramiv )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETPROGRAMINFOLOGPROC, glGetProgramInfoLog )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLUSEPROGRAMPROC, glUseProgram )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNGLGETATTRIBLOCATIONPROC, glGetAttribLocation )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNWGLCREATECONTEXTATTRIBSARBPROC, wglCreateContextAttribsARB )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNWGLCHOOSEPIXELFORMATARBPROC, wglChoosePixelFormatARB )
//	QUANTUM_OPEN_GL_FUNC_PROC( PFNWGLGETEXTENSIONSSTRINGARBPROC, wglGetExtensionsStringARB );
//
//	_bApiLoaded = true;
//}
